//
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied. See the License for the specific language governing permissions and limitations under
// the License.
//

#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kite-test.sever:server');
var io = require('socket.io');
var https = require('https');
//var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8000');

if (process.argv.length > 2){
  port = process.argv[2];
}

app.set('port', port);

var ioSocket = new io();

var options = {
  key: fs.readFileSync(__dirname +'/config/server.key'),
  cert: fs.readFileSync(__dirname + '/config/server.cert')
};

var server = https.createServer(options, app);
ioSocket.attach(server);

ioSocket.on('connection', function (socket) {
  socket.emit('serverNews', { hello: 'world' });
  socket.on('hello', function (data) {
    var receivedId = data.id;
    socket.broadcast.emit('hello', data);
  });
  socket.on('goodbye', function (data) {
  });
  socket.on('webrtc', function (data) {
    var srcId = data.from;
    var destId = data.to;
    socket.broadcast.emit('webrtc', { channel: data.channel, from: data.from, to: data.to, msg: data.msg });
  });
});

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  // Modify addr here to use other interface IP
  //var addr = '192.168.1.40';
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
